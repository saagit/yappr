#!/usr/bin/env python3

# Copyright 2020, 2023 Scott A. Anderson
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# pylint: disable=C0111

import argparse
import configparser
import datetime
import io
from http.client import IncompleteRead
from pathlib import Path
import re
from shutil import copyfileobj
import sys
from urllib.parse import urlparse
from urllib.request import urlopen

from PIL import Image
import mutagen
from mutagen.id3 import Encoding, APIC, TALB, TCON, TIT2, TLEN, TPE1
import podcastparser

PROG_DESCRIPTION = 'yappr: Yet Another Python Podcast Retriever'

def get_args():
    argp = argparse.ArgumentParser(description=PROG_DESCRIPTION)
    argp.add_argument('-F', '--config-file',
                      default=Path('~/.podcasts/config').expanduser(),
                      help='The configuration file to use.')
    argp.add_argument('-c', '--config-section', default='DEFAULT',
                      help='The section of the configuration file to use.')
    argp.add_argument('-D', '--download-directory',
                      help='Directory to download podcasts to.')
    argp.add_argument('-G', '--GUID-file',
                      help='File to track the GUIDs of downloaded podcasts.')
    argp.add_argument('-n', '--dry-run', action='store_true',
                      help='Do not write to local files (same as -d -g).')
    argp.add_argument('-d', '--download-skip', action='store_true',
                      help='Do not download podcasts.')
    argp.add_argument('-g', '--GUID-skip', action='store_true',
                      help='Do not write GUIDs to GUID-file.')
    argp.add_argument('-q', '--quiet', action='store_true',
                      help='Do not print episode titles.')
    argp.add_argument('feeds', metavar='FEED', nargs='*',
                      help='Fetch FEEDs instead of '
                      'feeds from configuration file.')
    args = argp.parse_args()

    valid_config_keys = {
        'download directory',
        'guid file',
        'dry run',
        'download skip',
        'guid skip',
        'feeds'
        }
    config_defaults = {
        'download directory': Path('~/.podcasts/download').expanduser(),
        'guid file': Path('~/.podcasts/GUIDs').expanduser()
        }
    cfgp = configparser.ConfigParser(config_defaults)
    cfgp.read(args.config_file)
    cfg = cfgp[args.config_section]
    invalid_config_keys = set(cfg) - valid_config_keys
    if invalid_config_keys:
        print(f'Ignoring the following invalid key(s) in {args.config_file}:',
              file=sys.stderr)
        for key in sorted(invalid_config_keys):
            print(f' "{key}"', file=sys.stderr)
        print('Valid config keys:', file=sys.stderr)
        for key in sorted(valid_config_keys):
            print(f' "{key}"', file=sys.stderr)

    if not args.feeds:
        args.feeds = [feed for feed in cfg['Feeds'].splitlines() if feed]

    if args.download_directory:
        args.download_directory = Path(args.download_directory)
    else:
        args.download_directory = Path(cfg['download directory']).expanduser()

    if args.GUID_file:
        args.GUID_file = Path(args.GUID_file)
    else:
        args.GUID_file = Path(cfg['guid file']).expanduser()

    if cfgp.getboolean(args.config_section, 'dry run', fallback=False):
        args.dry_run = True

    if cfgp.getboolean(args.config_section, 'download skip', fallback=False):
        args.download_skip = True

    if cfgp.getboolean(args.config_section, 'guid skip', fallback=False):
        args.GUID_skip = True

    if args.dry_run:
        args.download_skip = True
        args.GUID_skip = True

    return args

# Ultimately we want the files to go on FAT32 volumes, so ensure filenames
# don't have characters Microsoft says they can't handle. Reference:
# https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
INVALID_FILENAME_CHARACTERS = re.compile(r'[\000-\037<>:"/\|?*]')
def sanitize_filename(filename):
    return INVALID_FILENAME_CHARACTERS.sub('#', filename)

def cover_png(url):
    with io.BytesIO(urlopen(url).read()) as cover_f:
        cover = Image.open(cover_f).resize((300, 300)).convert('RGB')

    with io.BytesIO() as cover_bytes:
        cover.save(cover_bytes, format='PNG')
        return cover_bytes.getvalue()

def no_padding(_info):
    return 0  # No need for tag padding in our audio files

def fetch_url(url, local_path):
    num_retries = 6
    for i in range(num_retries):
        try:
            with urlopen(url) as src, open(local_path, 'wb') as dst:
                copyfileobj(src, dst)
        except IncompleteRead:
            print(f'  HTTP incomplete read: Retry {i+1} of {num_retries}',
                  file=sys.stderr)
        else:
            return
    print(f'Failed to read {url}', file=sys.stderr)
    sys.exit(4)

def save_episode(save_dir, feed_title, cover, episode, args):
    pub_dt = datetime.datetime.fromtimestamp(episode['published'],
                                             datetime.timezone.utc)
    title = f"{pub_dt:%y%m%d} {episode['title']}"
    if not args.quiet:
        print(f"{feed_title} {title}")

    if args.download_skip:
        return

    url = episode['enclosures'][0]['url']
    extension = Path(urlparse(url).path).suffix
    filename = Path(sanitize_filename(title)).with_suffix(extension)
    episode_path = save_dir / filename

    fetch_url(url, episode_path)

    audio = mutagen.File(episode_path)
    audio.delete()
    audio.tags.add(TALB(encoding=Encoding.UTF16, text=feed_title))
    audio.tags.add(TPE1(encoding=Encoding.UTF16, text=feed_title))
    audio.tags.add(TIT2(encoding=Encoding.UTF16, text=title))
    audio.tags.add(TCON(encoding=Encoding.LATIN1, text='Podcast'))
    audio.tags.add(APIC(encoding=Encoding.LATIN1, mime='image/png', data=cover))
    audio.tags.add(TLEN(encoding=Encoding.LATIN1,
                        text=str(int(round(audio.info.length * 1000)))))
    audio.tags.update_to_v23()
    audio.tags.save(episode_path, v2_version=3, padding=no_padding)

def main():
    args = get_args()

    if args.download_skip:
        print('As requested, podcast files will not be written.',
              file=sys.stderr)
    if args.GUID_skip:
        print('As requested, the GUIDs of podcasts will not be stored.',
              file=sys.stderr)

    args.GUID_file.touch() # Ensure GUID file exists before using
    with open(args.GUID_file, 'r+', encoding='utf-8') as guid_file:
        # Create a set of GUIDs that we have downloaded in the past so
        # we can quickly check if a podcast needs to be downloaded.
        guids = set(line.strip().split('\t', 1)[0]
                    for line in guid_file if not line.startswith('#'))
        guid_written = False
        for feed in args.feeds:
            # Create a dictionary of the feed
            with urlopen(feed) as feed_f:
                feed_dict = podcastparser.parse(feed, feed_f)

                # Ensure a directory for this feed exists
                feed_dir = args.download_directory / feed_dict['title']
                try:
                    feed_dir.mkdir(parents=True, exist_ok=True)
                except (FileNotFoundError, PermissionError) as err:
                    print(f'Error accessing directory "{feed_dir}": {err}')
                    return 1

                cover = cover_png(feed_dict['cover_url'])

                for episode in reversed(feed_dict['episodes']):
                    # Skip if no content or already downloaded
                    if not episode['enclosures'] or episode['guid'] in guids:
                        continue

                    save_episode(feed_dir, feed_dict['title'],
                                 cover, episode, args)

                    if not args.GUID_skip:
                        print(f"{episode['guid']}\t{episode['title']}",
                              file=guid_file)
                        guid_written = True
                    guids.add(episode['guid'])

        if guid_written:
            print(f"# {datetime.datetime.now().isoformat()}: "
                  f"GUID update finished", file=guid_file)

    return 0

if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        sys.exit(3)
